name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        mypy jaxabm --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # Don't fail CI on type errors for now

    - name: Test with pytest
      run: |
        pytest tests/ -v --tb=short --cov=jaxabm --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-examples:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Test basic example
      run: |
        python examples/basic_example.py

    - name: Test calibration examples
      run: |
        cd examples/calibration
        python final_working_calibration_demo.py

    - name: Test model examples
      run: |
        cd examples/models
        python schelling_model.py
        python random_walk.py

    - name: Test sensitivity examples
      run: |
        cd examples/sensitivity
        python simple_sensitivity_example.py

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Run performance benchmarks
      run: |
        python -c "
        import time
        from jaxabm.analysis import ModelCalibrator
        from tests.integration.test_calibration_integration import create_population_model
        
        # Performance test for PSO
        start_time = time.time()
        calibrator = ModelCalibrator(
            model_factory=create_population_model,
            initial_params={'birth_rate': 0.02, 'death_rate': 0.015, 'migration_rate': 0.001, 'carrying_capacity': 1000.0},
            target_metrics={'final_population': 800.0, 'avg_population': 750.0},
            param_bounds={'birth_rate': (0.01, 0.05), 'death_rate': (0.005, 0.03), 'migration_rate': (-0.005, 0.005), 'carrying_capacity': (500.0, 1500.0)},
            method='pso',
            max_iterations=50,
            seed=42
        )
        best_params = calibrator.calibrate(verbose=False)
        end_time = time.time()
        
        print(f'PSO calibration took {end_time - start_time:.2f} seconds')
        print(f'Final loss: {calibrator.best_loss:.6f}')
        assert calibrator.best_loss < 20.0, f'Performance regression: loss {calibrator.best_loss} > 20.0'
        "

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit security scan
      uses: securecodewarrior/github-action-bandit@v1
      with:
        config_file: .bandit
      continue-on-error: true

    - name: Run Safety check
      run: |
        pip install safety
        safety check --json || true

  docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Build documentation
      run: |
        # Add documentation build commands here when ready
        echo "Documentation build placeholder"

  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    needs: [test, test-examples]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false

  notify:
    runs-on: ubuntu-latest
    needs: [test, test-examples]
    if: failure()
    steps:
    - name: Notify on failure
      run: |
        echo "CI pipeline failed. Check the logs for details."
        # Add notification logic here (Slack, email, etc.) 